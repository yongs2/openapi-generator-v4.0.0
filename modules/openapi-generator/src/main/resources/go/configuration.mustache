{{>partial_header}}
package {{packageName}}

import (
	"net/http"
    "strings"
)

{{#defaultServer}}
type Configuration struct {
    url           string
    basePath      string
    host          string
    defaultHeader map[string]string
    userAgent     string
    httpClient *http.Client
}
{{/defaultServer}}

func NewConfiguration() *Configuration {
	cfg := &Configuration{
        basePath: "{{{basePath}}}",
		url:      "{{#defaultServer}}{{{url}}}{{/defaultServer}}",
		defaultHeader: make(map[string]string),
		userAgent:     "{{#httpUserAgent}}{{{.}}}{{/httpUserAgent}}{{^httpUserAgent}}OpenAPI-Generator/{{{packageVersion}}}/go{{/httpUserAgent}}",
	}
	return cfg
}

func (c *Configuration) SetBasePath({{#defaultServer}}{{#variables}}{{{name}}} string{{^-last}}, {{/-last}}{{/variables}}{{/defaultServer}}) {
    url := c.url

{{#defaultServer}}
{{#variables}}
    // Replace {{{name}}}
    url = strings.Replace(url, "{"+"{{{name}}}"+"}", {{{name}}}, -1)
{{/variables}}
{{/defaultServer}}

    c.basePath = url
}

func (c *Configuration) BasePath() string {
    return c.basePath
}

func (c *Configuration) Host() string {
    return c.host
}

func (c *Configuration) SetHost(host string) {
    c.host = host
}

func (c *Configuration) UserAgent() string {
    return c.userAgent
}

func (c *Configuration) SetUserAgent(userAgent string) {
    c.userAgent = userAgent
}

func (c *Configuration) DefaultHeader() map[string]string {
    return c.defaultHeader
}

func (c *Configuration) AddDefaultHeader(key string, value string) {
    c.defaultHeader[key] = value
}

func (c *Configuration) HTTPClient() *http.Client {
return c.httpClient
}